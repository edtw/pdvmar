// scripts/fixProductTypes.js
// Corrigir os tipos de produtos baseado em seus nomes

const mongoose = require('mongoose');
const config = require('../config');

// Carregar modelo Product
require('../models/Product');

// Conectar ao banco de dados
mongoose.connect(config.MONGODB_URI, {});

const Product = mongoose.model('Product');

async function fixProductTypes() {
  try {
    console.log('üîÑ Corrigindo tipos de produtos...\n');

    // Produtos que definitivamente s√£o bebidas
    const beverageProducts = [
      '√Ågua Mineral sem G√°s',
      '√Ågua Mineral com G√°s',
      'Refrigerante',
      'Suco Natural',
      'Cerveja Brahma',
      'Cerveja Heineken',
      'Cerveja Corona',
      'Caipirinha',
      'Margarita',
      'Gin T√¥nica'
    ];

    let beverageCount = 0;
    let foodCount = 0;

    for (const productName of beverageProducts) {
      const result = await Product.updateOne(
        { name: productName },
        { $set: { productType: 'beverage' } }
      );

      if (result.modifiedCount > 0) {
        console.log(`üçπ "${productName}" ‚Üí beverage`);
        beverageCount++;
      }
    }

    // Produtos que s√£o comida
    const foodProducts = [
      'Batata Frita',
      'Isca de Peixe',
      'Carne de Sol com Mandioca',
      'Moqueca de Camar√£o',
      'Peixe Grelhado',
      'Camar√£o ao Alho e √ìleo'
    ];

    for (const productName of foodProducts) {
      const result = await Product.updateOne(
        { name: productName },
        { $set: { productType: 'food' } }
      );

      if (result.modifiedCount > 0) {
        console.log(`üçî "${productName}" ‚Üí food`);
        foodCount++;
      }
    }

    console.log('\nüìä Resumo:');
    console.log(`   üçπ Bebidas atualizadas: ${beverageCount}`);
    console.log(`   üçî Comidas confirmadas: ${foodCount}\n`);

    // Listar todos os produtos e seus tipos
    const allProducts = await Product.find({}).select('name productType');
    console.log('üìã Lista completa de produtos:\n');

    const grouped = allProducts.reduce((acc, p) => {
      if (!acc[p.productType]) acc[p.productType] = [];
      acc[p.productType].push(p.name);
      return acc;
    }, {});

    if (grouped.food) {
      console.log('üçî COMIDA (vai para COZINHA):');
      grouped.food.forEach(name => console.log(`   - ${name}`));
      console.log('');
    }

    if (grouped.beverage) {
      console.log('üçπ BEBIDA (vai para GAR√áOM):');
      grouped.beverage.forEach(name => console.log(`   - ${name}`));
      console.log('');
    }

    mongoose.connection.close();
    console.log('‚úÖ Corre√ß√£o conclu√≠da!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro:', error);
    mongoose.connection.close();
    process.exit(1);
  }
}

fixProductTypes();
